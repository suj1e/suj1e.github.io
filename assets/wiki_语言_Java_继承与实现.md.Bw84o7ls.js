import{_ as s,c as i,o as t,ag as e}from"./chunks/framework.BgId8OS5.js";const c=JSON.parse('{"title":"继承与实现","description":"","frontmatter":{"title":"继承与实现","slug":"继承与实现","sidebar_position":3},"headers":[],"relativePath":"wiki/语言/Java/继承与实现.md","filePath":"wiki/语言/Java/继承与实现.md"}'),n={name:"wiki/语言/Java/继承与实现.md"};function p(h,a,l,r,k,d){return t(),i("div",null,a[0]||(a[0]=[e(`<h1 id="继承与实现" tabindex="-1">继承与实现 <a class="header-anchor" href="#继承与实现" aria-label="Permalink to &quot;继承与实现&quot;">​</a></h1><h2 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-label="Permalink to &quot;继承&quot;">​</a></h2><p>单继承，继承一般写的场景是对于子类的公共支撑，是特有的</p><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h2><p>多实现，实现一个接口就是注入了一种能力。</p><p>单继承特有的公共的，配合多实现注入能力</p><p>eg:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OperationLogInterceptor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OperationLogAspectSupport</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MethodInterceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;, &lt;/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Ordered</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,8)]))}const g=s(n,[["render",p]]);export{c as __pageData,g as default};
