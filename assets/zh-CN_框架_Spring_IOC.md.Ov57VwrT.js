import{_ as i,c as a,o as t,ag as l}from"./chunks/framework.BgId8OS5.js";const m=JSON.parse('{"title":"IOC","description":"","frontmatter":{"title":"IOC","slug":"IOC","sidebar_position":1},"headers":[],"relativePath":"zh-CN/框架/Spring/IOC.md","filePath":"zh-CN/框架/Spring/IOC.md"}'),r={name:"zh-CN/框架/Spring/IOC.md"};function n(o,e,p,s,c,_){return t(),a("div",null,e[0]||(e[0]=[l('<h1 id="ioc" tabindex="-1">IOC <a class="header-anchor" href="#ioc" aria-label="Permalink to &quot;IOC&quot;">​</a></h1><h2 id="注入bean的几种方式" tabindex="-1">注入bean的几种方式 <a class="header-anchor" href="#注入bean的几种方式" aria-label="Permalink to &quot;注入bean的几种方式&quot;">​</a></h2><ul><li>@Component及派生注解</li><li>@EnableXx搭配@Import注册</li><li>@Import</li><li>@Bean</li><li>registry</li><li>FactoryBean</li><li>ImportSelector</li><li>ImportBeanDefinitionRegistrar</li></ul><p>使用FactoryBean，可以<strong>隐藏bean的细节</strong>，同时可以引入更复杂的处理</p><ol><li>可以实现一个特别复杂的对象</li><li>或者可以通过创建代理对象【@EnableFeignClients是一个很好的例子】</li></ol><p><code>FactoryBean</code>的使用场景：</p><ol><li>类似于接口代理【FeignClient】</li><li>类似于mapper代理执行【mybatis mapper定义】</li><li>总结：一般都用于对于interface的方法执行代理</li></ol><p><b>注解的本质就是打标签、然后解析注解根据标签来做事。</b></p>',8)]))}const C=i(r,[["render",n]]);export{m as __pageData,C as default};
